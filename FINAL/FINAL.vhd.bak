library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity FINAL is
    Port ( 
        clk : in STD_LOGIC;
        reset : in STD_LOGIC;
        enable_system : in STD_LOGIC;                    -- Interruptor para habilitar/deshabilitar
        entry_button : in STD_LOGIC;                     -- Pulsador de entrada
        exit_button : in STD_LOGIC;                      -- Pulsador de salida
        max_capacity_sensor : in STD_LOGIC;              -- Sensor de capacidad máxima
        low_occupancy_sensor : in STD_LOGIC;             -- Sensor de ocupación baja
        
        green_led : out STD_LOGIC;                       -- LED verde (entrada habilitada)
        red_led : out STD_LOGIC;                         -- LED rojo (estacionamiento lleno)
        yellow_led : out STD_LOGIC;                      -- LED amarillo (menos de 5 espacios)
        seven_seg_display : out STD_LOGIC_VECTOR(6 downto 0);  -- Display 7 segmentos
        lcd_max_capacity : out STD_LOGIC                 -- Señal para LCD
    );
end FINAL;

architecture Behavioral of FINAL is
    -- Definición de estados
    type state_type is (EMPTY, WAITING_ENTRY, WAITING_EXIT, FULL, ALERT);
    signal current_state, next_state : state_type;
    
    -- Constantes
    constant MAX_CARS : integer := 50;
    constant LOW_SPACE_THRESHOLD : integer := 5;
    
    -- Señales internas
    signal car_count : integer range 0 to MAX_CARS := 0;
    
    -- Función para convertir número a display 7 segmentos
    function to_seven_seg(num : integer) return std_logic_vector is
    begin
        case num is
            when 0 => return "1111110";  -- 0
            when 1 => return "0110000";  -- 1
            when 2 => return "1101101";  -- 2
            when 3 => return "1111001";  -- 3
            when 4 => return "0110011";  -- 4
            when 5 => return "1011011";  -- 5
            when 6 => return "1011111";  -- 6
            when 7 => return "1110000";  -- 7
            when 8 => return "1111111";  -- 8
            when 9 => return "1111011";  -- 9
            when others => return "0000000";
        end case;
    end function;

begin
    -- Proceso de actualización de estado
    process(clk, reset)
    begin
        if reset = '1' then
            current_state <= EMPTY;
            car_count <= 0;
        elsif rising_edge(clk) then
            if enable_system = '1' then
                current_state <= next_state;
                
                -- Actualizar contador de autos
                case current_state is
                    when WAITING_ENTRY =>
                        if entry_button = '1' and car_count < MAX_CARS then
                            car_count <= car_count + 1;
                        end if;
                    when WAITING_EXIT =>
                        if exit_button = '1' and car_count > 0 then
                            car_count <= car_count - 1;
                        end if;
                    when others =>
                        null;
                end case;
            end if;
        end if;
    end process;

    -- Proceso de lógica de siguiente estado
    process(current_state, entry_button, exit_button, max_capacity_sensor, car_count)
    begin
        case current_state is
            when EMPTY =>
                if entry_button = '1' then
                    next_state <= WAITING_ENTRY;
                else
                    next_state <= EMPTY;
                end if;
                
            when WAITING_ENTRY =>
                if car_count >= MAX_CARS then
                    next_state <= FULL;
                elsif car_count >= MAX_CARS - LOW_SPACE_THRESHOLD then
                    next_state <= ALERT;
                elsif exit_button = '1' then
                    next_state <= WAITING_EXIT;
                else
                    next_state <= WAITING_ENTRY;
                end if;
                
            when WAITING_EXIT =>
                if car_count = 0 then
                    next_state <= EMPTY;
                elsif entry_button = '1' then
                    next_state <= WAITING_ENTRY;
                else
                    next_state <= WAITING_EXIT;
                end if;
                
            when FULL =>
                if exit_button = '1' then
                    next_state <= WAITING_EXIT;
                else
                    next_state <= FULL;
                end if;
                
            when ALERT =>
                if car_count >= MAX_CARS then
                    next_state <= FULL;
                elsif car_count < MAX_CARS - LOW_SPACE_THRESHOLD then
                    next_state <= WAITING_ENTRY;
                elsif exit_button = '1' then
                    next_state <= WAITING_EXIT;
                else
                    next_state <= ALERT;
                end if;
        end case;
    end process;

    -- Proceso de salidas
    process(current_state, car_count)
    begin
        -- Valores por defecto
        green_led <= '0';
        red_led <= '0';
        yellow_led <= '0';
        lcd_max_capacity <= '0';
        
        case current_state is
            when EMPTY =>
                green_led <= '1';
                
            when WAITING_ENTRY =>
                green_led <= '1';
                if car_count >= MAX_CARS - LOW_SPACE_THRESHOLD then
                    yellow_led <= '1';
                end if;
                
            when WAITING_EXIT =>
                green_led <= '1';
                if car_count >= MAX_CARS - LOW_SPACE_THRESHOLD then
                    yellow_led <= '1';
                end if;
                
            when FULL =>
                red_led <= '1';
                lcd_max_capacity <= '1';
                
            when ALERT =>
                green_led <= '1';
                yellow_led <= '1';
        end case;
        
        -- Actualizar display 7 segmentos
        -- Nota: En la práctica, necesitarías lógica adicional para mostrar números mayores a 9
        seven_seg_display <= to_seven_seg(car_count mod 10);
    end process;

end Behavioral;